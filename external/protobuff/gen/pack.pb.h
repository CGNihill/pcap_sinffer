// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pack_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pack_2eproto;
class pack;
struct packDefaultTypeInternal;
extern packDefaultTypeInternal _pack_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::pack* Arena::CreateMaybeMessage<::pack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class pack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pack) */ {
 public:
  inline pack() : pack(nullptr) {}
  ~pack() override;
  explicit PROTOBUF_CONSTEXPR pack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pack(const pack& from);
  pack(pack&& from) noexcept
    : pack() {
    *this = ::std::move(from);
  }

  inline pack& operator=(const pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline pack& operator=(pack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pack& default_instance() {
    return *internal_default_instance();
  }
  static inline const pack* internal_default_instance() {
    return reinterpret_cast<const pack*>(
               &_pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pack& a, pack& b) {
    a.Swap(&b);
  }
  inline void Swap(pack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pack& from) {
    pack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pack";
  }
  protected:
  explicit pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSMacFieldNumber = 3,
    kDMacFieldNumber = 4,
    kSIpFieldNumber = 6,
    kDIpFieldNumber = 7,
    kTProtoFieldNumber = 8,
    kPayloadFieldNumber = 11,
    kTimeFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kIPvFieldNumber = 5,
    kSPortFieldNumber = 9,
    kDPortFieldNumber = 10,
  };
  // string s_mac = 3;
  void clear_s_mac();
  const std::string& s_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_mac();
  PROTOBUF_NODISCARD std::string* release_s_mac();
  void set_allocated_s_mac(std::string* s_mac);
  private:
  const std::string& _internal_s_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_mac(const std::string& value);
  std::string* _internal_mutable_s_mac();
  public:

  // string d_mac = 4;
  void clear_d_mac();
  const std::string& d_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d_mac();
  PROTOBUF_NODISCARD std::string* release_d_mac();
  void set_allocated_d_mac(std::string* d_mac);
  private:
  const std::string& _internal_d_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d_mac(const std::string& value);
  std::string* _internal_mutable_d_mac();
  public:

  // string s_ip = 6;
  void clear_s_ip();
  const std::string& s_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_ip();
  PROTOBUF_NODISCARD std::string* release_s_ip();
  void set_allocated_s_ip(std::string* s_ip);
  private:
  const std::string& _internal_s_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_ip(const std::string& value);
  std::string* _internal_mutable_s_ip();
  public:

  // string d_ip = 7;
  void clear_d_ip();
  const std::string& d_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_d_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_d_ip();
  PROTOBUF_NODISCARD std::string* release_d_ip();
  void set_allocated_d_ip(std::string* d_ip);
  private:
  const std::string& _internal_d_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_d_ip(const std::string& value);
  std::string* _internal_mutable_d_ip();
  public:

  // string t_proto = 8;
  void clear_t_proto();
  const std::string& t_proto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_t_proto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_t_proto();
  PROTOBUF_NODISCARD std::string* release_t_proto();
  void set_allocated_t_proto(std::string* t_proto);
  private:
  const std::string& _internal_t_proto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_t_proto(const std::string& value);
  std::string* _internal_mutable_t_proto();
  public:

  // string payload = 11;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 time = 1;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 frameSize = 2;
  void clear_framesize();
  uint32_t framesize() const;
  void set_framesize(uint32_t value);
  private:
  uint32_t _internal_framesize() const;
  void _internal_set_framesize(uint32_t value);
  public:

  // uint32 IPv = 5;
  void clear_ipv();
  uint32_t ipv() const;
  void set_ipv(uint32_t value);
  private:
  uint32_t _internal_ipv() const;
  void _internal_set_ipv(uint32_t value);
  public:

  // uint32 s_port = 9;
  void clear_s_port();
  uint32_t s_port() const;
  void set_s_port(uint32_t value);
  private:
  uint32_t _internal_s_port() const;
  void _internal_set_s_port(uint32_t value);
  public:

  // uint32 d_port = 10;
  void clear_d_port();
  uint32_t d_port() const;
  void set_d_port(uint32_t value);
  private:
  uint32_t _internal_d_port() const;
  void _internal_set_d_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_mac_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_mac_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t_proto_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint32_t time_;
    uint32_t framesize_;
    uint32_t ipv_;
    uint32_t s_port_;
    uint32_t d_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pack

// uint32 time = 1;
inline void pack::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t pack::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t pack::time() const {
  // @@protoc_insertion_point(field_get:pack.time)
  return _internal_time();
}
inline void pack::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void pack::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pack.time)
}

// uint32 frameSize = 2;
inline void pack::clear_framesize() {
  _impl_.framesize_ = 0u;
}
inline uint32_t pack::_internal_framesize() const {
  return _impl_.framesize_;
}
inline uint32_t pack::framesize() const {
  // @@protoc_insertion_point(field_get:pack.frameSize)
  return _internal_framesize();
}
inline void pack::_internal_set_framesize(uint32_t value) {
  
  _impl_.framesize_ = value;
}
inline void pack::set_framesize(uint32_t value) {
  _internal_set_framesize(value);
  // @@protoc_insertion_point(field_set:pack.frameSize)
}

// string s_mac = 3;
inline void pack::clear_s_mac() {
  _impl_.s_mac_.ClearToEmpty();
}
inline const std::string& pack::s_mac() const {
  // @@protoc_insertion_point(field_get:pack.s_mac)
  return _internal_s_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_s_mac(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s_mac_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.s_mac)
}
inline std::string* pack::mutable_s_mac() {
  std::string* _s = _internal_mutable_s_mac();
  // @@protoc_insertion_point(field_mutable:pack.s_mac)
  return _s;
}
inline const std::string& pack::_internal_s_mac() const {
  return _impl_.s_mac_.Get();
}
inline void pack::_internal_set_s_mac(const std::string& value) {
  
  _impl_.s_mac_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_s_mac() {
  
  return _impl_.s_mac_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_s_mac() {
  // @@protoc_insertion_point(field_release:pack.s_mac)
  return _impl_.s_mac_.Release();
}
inline void pack::set_allocated_s_mac(std::string* s_mac) {
  if (s_mac != nullptr) {
    
  } else {
    
  }
  _impl_.s_mac_.SetAllocated(s_mac, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s_mac_.IsDefault()) {
    _impl_.s_mac_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.s_mac)
}

// string d_mac = 4;
inline void pack::clear_d_mac() {
  _impl_.d_mac_.ClearToEmpty();
}
inline const std::string& pack::d_mac() const {
  // @@protoc_insertion_point(field_get:pack.d_mac)
  return _internal_d_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_d_mac(ArgT0&& arg0, ArgT... args) {
 
 _impl_.d_mac_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.d_mac)
}
inline std::string* pack::mutable_d_mac() {
  std::string* _s = _internal_mutable_d_mac();
  // @@protoc_insertion_point(field_mutable:pack.d_mac)
  return _s;
}
inline const std::string& pack::_internal_d_mac() const {
  return _impl_.d_mac_.Get();
}
inline void pack::_internal_set_d_mac(const std::string& value) {
  
  _impl_.d_mac_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_d_mac() {
  
  return _impl_.d_mac_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_d_mac() {
  // @@protoc_insertion_point(field_release:pack.d_mac)
  return _impl_.d_mac_.Release();
}
inline void pack::set_allocated_d_mac(std::string* d_mac) {
  if (d_mac != nullptr) {
    
  } else {
    
  }
  _impl_.d_mac_.SetAllocated(d_mac, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.d_mac_.IsDefault()) {
    _impl_.d_mac_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.d_mac)
}

// uint32 IPv = 5;
inline void pack::clear_ipv() {
  _impl_.ipv_ = 0u;
}
inline uint32_t pack::_internal_ipv() const {
  return _impl_.ipv_;
}
inline uint32_t pack::ipv() const {
  // @@protoc_insertion_point(field_get:pack.IPv)
  return _internal_ipv();
}
inline void pack::_internal_set_ipv(uint32_t value) {
  
  _impl_.ipv_ = value;
}
inline void pack::set_ipv(uint32_t value) {
  _internal_set_ipv(value);
  // @@protoc_insertion_point(field_set:pack.IPv)
}

// string s_ip = 6;
inline void pack::clear_s_ip() {
  _impl_.s_ip_.ClearToEmpty();
}
inline const std::string& pack::s_ip() const {
  // @@protoc_insertion_point(field_get:pack.s_ip)
  return _internal_s_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_s_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.s_ip)
}
inline std::string* pack::mutable_s_ip() {
  std::string* _s = _internal_mutable_s_ip();
  // @@protoc_insertion_point(field_mutable:pack.s_ip)
  return _s;
}
inline const std::string& pack::_internal_s_ip() const {
  return _impl_.s_ip_.Get();
}
inline void pack::_internal_set_s_ip(const std::string& value) {
  
  _impl_.s_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_s_ip() {
  
  return _impl_.s_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_s_ip() {
  // @@protoc_insertion_point(field_release:pack.s_ip)
  return _impl_.s_ip_.Release();
}
inline void pack::set_allocated_s_ip(std::string* s_ip) {
  if (s_ip != nullptr) {
    
  } else {
    
  }
  _impl_.s_ip_.SetAllocated(s_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s_ip_.IsDefault()) {
    _impl_.s_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.s_ip)
}

// string d_ip = 7;
inline void pack::clear_d_ip() {
  _impl_.d_ip_.ClearToEmpty();
}
inline const std::string& pack::d_ip() const {
  // @@protoc_insertion_point(field_get:pack.d_ip)
  return _internal_d_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_d_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.d_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.d_ip)
}
inline std::string* pack::mutable_d_ip() {
  std::string* _s = _internal_mutable_d_ip();
  // @@protoc_insertion_point(field_mutable:pack.d_ip)
  return _s;
}
inline const std::string& pack::_internal_d_ip() const {
  return _impl_.d_ip_.Get();
}
inline void pack::_internal_set_d_ip(const std::string& value) {
  
  _impl_.d_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_d_ip() {
  
  return _impl_.d_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_d_ip() {
  // @@protoc_insertion_point(field_release:pack.d_ip)
  return _impl_.d_ip_.Release();
}
inline void pack::set_allocated_d_ip(std::string* d_ip) {
  if (d_ip != nullptr) {
    
  } else {
    
  }
  _impl_.d_ip_.SetAllocated(d_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.d_ip_.IsDefault()) {
    _impl_.d_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.d_ip)
}

// string t_proto = 8;
inline void pack::clear_t_proto() {
  _impl_.t_proto_.ClearToEmpty();
}
inline const std::string& pack::t_proto() const {
  // @@protoc_insertion_point(field_get:pack.t_proto)
  return _internal_t_proto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_t_proto(ArgT0&& arg0, ArgT... args) {
 
 _impl_.t_proto_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.t_proto)
}
inline std::string* pack::mutable_t_proto() {
  std::string* _s = _internal_mutable_t_proto();
  // @@protoc_insertion_point(field_mutable:pack.t_proto)
  return _s;
}
inline const std::string& pack::_internal_t_proto() const {
  return _impl_.t_proto_.Get();
}
inline void pack::_internal_set_t_proto(const std::string& value) {
  
  _impl_.t_proto_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_t_proto() {
  
  return _impl_.t_proto_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_t_proto() {
  // @@protoc_insertion_point(field_release:pack.t_proto)
  return _impl_.t_proto_.Release();
}
inline void pack::set_allocated_t_proto(std::string* t_proto) {
  if (t_proto != nullptr) {
    
  } else {
    
  }
  _impl_.t_proto_.SetAllocated(t_proto, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.t_proto_.IsDefault()) {
    _impl_.t_proto_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.t_proto)
}

// uint32 s_port = 9;
inline void pack::clear_s_port() {
  _impl_.s_port_ = 0u;
}
inline uint32_t pack::_internal_s_port() const {
  return _impl_.s_port_;
}
inline uint32_t pack::s_port() const {
  // @@protoc_insertion_point(field_get:pack.s_port)
  return _internal_s_port();
}
inline void pack::_internal_set_s_port(uint32_t value) {
  
  _impl_.s_port_ = value;
}
inline void pack::set_s_port(uint32_t value) {
  _internal_set_s_port(value);
  // @@protoc_insertion_point(field_set:pack.s_port)
}

// uint32 d_port = 10;
inline void pack::clear_d_port() {
  _impl_.d_port_ = 0u;
}
inline uint32_t pack::_internal_d_port() const {
  return _impl_.d_port_;
}
inline uint32_t pack::d_port() const {
  // @@protoc_insertion_point(field_get:pack.d_port)
  return _internal_d_port();
}
inline void pack::_internal_set_d_port(uint32_t value) {
  
  _impl_.d_port_ = value;
}
inline void pack::set_d_port(uint32_t value) {
  _internal_set_d_port(value);
  // @@protoc_insertion_point(field_set:pack.d_port)
}

// string payload = 11;
inline void pack::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& pack::payload() const {
  // @@protoc_insertion_point(field_get:pack.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pack::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pack.payload)
}
inline std::string* pack::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:pack.payload)
  return _s;
}
inline const std::string& pack::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void pack::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* pack::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* pack::release_payload() {
  // @@protoc_insertion_point(field_release:pack.payload)
  return _impl_.payload_.Release();
}
inline void pack::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pack.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pack_2eproto
