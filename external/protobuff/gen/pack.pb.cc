// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#include "pack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR pack::pack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.d_mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.d_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_proto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.framesize_)*/0u
  , /*decltype(_impl_.ipv_)*/0u
  , /*decltype(_impl_.s_port_)*/0u
  , /*decltype(_impl_.d_port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct packDefaultTypeInternal {
  PROTOBUF_CONSTEXPR packDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~packDefaultTypeInternal() {}
  union {
    pack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 packDefaultTypeInternal _pack_default_instance_;
static ::_pb::Metadata file_level_metadata_pack_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pack_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pack_2eproto = nullptr;

const uint32_t TableStruct_pack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.framesize_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.s_mac_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.d_mac_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.ipv_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.s_ip_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.d_ip_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.t_proto_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.s_port_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.d_port_),
  PROTOBUF_FIELD_OFFSET(::pack, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pack)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_pack_default_instance_._instance,
};

const char descriptor_table_protodef_pack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\npack.proto\"\260\001\n\004pack\022\014\n\004time\030\001 \001(\r\022\021\n\tf"
  "rameSize\030\002 \001(\r\022\r\n\005s_mac\030\003 \001(\t\022\r\n\005d_mac\030\004"
  " \001(\t\022\013\n\003IPv\030\005 \001(\r\022\014\n\004s_ip\030\006 \001(\t\022\014\n\004d_ip\030"
  "\007 \001(\t\022\017\n\007t_proto\030\010 \001(\t\022\016\n\006s_port\030\t \001(\r\022\016"
  "\n\006d_port\030\n \001(\r\022\017\n\007payload\030\013 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pack_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pack_2eproto = {
    false, false, 199, descriptor_table_protodef_pack_2eproto,
    "pack.proto",
    &descriptor_table_pack_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_pack_2eproto::offsets,
    file_level_metadata_pack_2eproto, file_level_enum_descriptors_pack_2eproto,
    file_level_service_descriptors_pack_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pack_2eproto_getter() {
  return &descriptor_table_pack_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pack_2eproto(&descriptor_table_pack_2eproto);

// ===================================================================

class pack::_Internal {
 public:
};

pack::pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pack)
}
pack::pack(const pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_mac_){}
    , decltype(_impl_.d_mac_){}
    , decltype(_impl_.s_ip_){}
    , decltype(_impl_.d_ip_){}
    , decltype(_impl_.t_proto_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.framesize_){}
    , decltype(_impl_.ipv_){}
    , decltype(_impl_.s_port_){}
    , decltype(_impl_.d_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_mac().empty()) {
    _this->_impl_.s_mac_.Set(from._internal_s_mac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.d_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.d_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_mac().empty()) {
    _this->_impl_.d_mac_.Set(from._internal_d_mac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s_ip().empty()) {
    _this->_impl_.s_ip_.Set(from._internal_s_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.d_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.d_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_d_ip().empty()) {
    _this->_impl_.d_ip_.Set(from._internal_d_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.t_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.t_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_t_proto().empty()) {
    _this->_impl_.t_proto_.Set(from._internal_t_proto(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.d_port_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.d_port_));
  // @@protoc_insertion_point(copy_constructor:pack)
}

inline void pack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_mac_){}
    , decltype(_impl_.d_mac_){}
    , decltype(_impl_.s_ip_){}
    , decltype(_impl_.d_ip_){}
    , decltype(_impl_.t_proto_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.framesize_){0u}
    , decltype(_impl_.ipv_){0u}
    , decltype(_impl_.s_port_){0u}
    , decltype(_impl_.d_port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.s_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.d_mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.d_mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.d_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.d_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.t_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.t_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pack::~pack() {
  // @@protoc_insertion_point(destructor:pack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_mac_.Destroy();
  _impl_.d_mac_.Destroy();
  _impl_.s_ip_.Destroy();
  _impl_.d_ip_.Destroy();
  _impl_.t_proto_.Destroy();
  _impl_.payload_.Destroy();
}

void pack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pack::Clear() {
// @@protoc_insertion_point(message_clear_start:pack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_mac_.ClearToEmpty();
  _impl_.d_mac_.ClearToEmpty();
  _impl_.s_ip_.ClearToEmpty();
  _impl_.d_ip_.ClearToEmpty();
  _impl_.t_proto_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.d_port_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.d_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frameSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.framesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string s_mac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_s_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.s_mac"));
        } else
          goto handle_unusual;
        continue;
      // string d_mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_d_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.d_mac"));
        } else
          goto handle_unusual;
        continue;
      // uint32 IPv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ipv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string s_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_s_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.s_ip"));
        } else
          goto handle_unusual;
        continue;
      // string d_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_d_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.d_ip"));
        } else
          goto handle_unusual;
        continue;
      // string t_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_t_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.t_proto"));
        } else
          goto handle_unusual;
        continue;
      // uint32 s_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.s_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 d_port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.d_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pack.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  // uint32 frameSize = 2;
  if (this->_internal_framesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_framesize(), target);
  }

  // string s_mac = 3;
  if (!this->_internal_s_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_mac().data(), static_cast<int>(this->_internal_s_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.s_mac");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s_mac(), target);
  }

  // string d_mac = 4;
  if (!this->_internal_d_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_mac().data(), static_cast<int>(this->_internal_d_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.d_mac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_d_mac(), target);
  }

  // uint32 IPv = 5;
  if (this->_internal_ipv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ipv(), target);
  }

  // string s_ip = 6;
  if (!this->_internal_s_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s_ip().data(), static_cast<int>(this->_internal_s_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.s_ip");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_s_ip(), target);
  }

  // string d_ip = 7;
  if (!this->_internal_d_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d_ip().data(), static_cast<int>(this->_internal_d_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.d_ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_d_ip(), target);
  }

  // string t_proto = 8;
  if (!this->_internal_t_proto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_t_proto().data(), static_cast<int>(this->_internal_t_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.t_proto");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_t_proto(), target);
  }

  // uint32 s_port = 9;
  if (this->_internal_s_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s_port(), target);
  }

  // uint32 d_port = 10;
  if (this->_internal_d_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_d_port(), target);
  }

  // string payload = 11;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pack.payload");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pack)
  return target;
}

size_t pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s_mac = 3;
  if (!this->_internal_s_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_mac());
  }

  // string d_mac = 4;
  if (!this->_internal_d_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_mac());
  }

  // string s_ip = 6;
  if (!this->_internal_s_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s_ip());
  }

  // string d_ip = 7;
  if (!this->_internal_d_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d_ip());
  }

  // string t_proto = 8;
  if (!this->_internal_t_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_t_proto());
  }

  // string payload = 11;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 frameSize = 2;
  if (this->_internal_framesize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_framesize());
  }

  // uint32 IPv = 5;
  if (this->_internal_ipv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv());
  }

  // uint32 s_port = 9;
  if (this->_internal_s_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_s_port());
  }

  // uint32 d_port = 10;
  if (this->_internal_d_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pack::GetClassData() const { return &_class_data_; }


void pack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pack*>(&to_msg);
  auto& from = static_cast<const pack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s_mac().empty()) {
    _this->_internal_set_s_mac(from._internal_s_mac());
  }
  if (!from._internal_d_mac().empty()) {
    _this->_internal_set_d_mac(from._internal_d_mac());
  }
  if (!from._internal_s_ip().empty()) {
    _this->_internal_set_s_ip(from._internal_s_ip());
  }
  if (!from._internal_d_ip().empty()) {
    _this->_internal_set_d_ip(from._internal_d_ip());
  }
  if (!from._internal_t_proto().empty()) {
    _this->_internal_set_t_proto(from._internal_t_proto());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_framesize() != 0) {
    _this->_internal_set_framesize(from._internal_framesize());
  }
  if (from._internal_ipv() != 0) {
    _this->_internal_set_ipv(from._internal_ipv());
  }
  if (from._internal_s_port() != 0) {
    _this->_internal_set_s_port(from._internal_s_port());
  }
  if (from._internal_d_port() != 0) {
    _this->_internal_set_d_port(from._internal_d_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pack::CopyFrom(const pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pack::IsInitialized() const {
  return true;
}

void pack::InternalSwap(pack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_mac_, lhs_arena,
      &other->_impl_.s_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.d_mac_, lhs_arena,
      &other->_impl_.d_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_ip_, lhs_arena,
      &other->_impl_.s_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.d_ip_, lhs_arena,
      &other->_impl_.d_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.t_proto_, lhs_arena,
      &other->_impl_.t_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pack, _impl_.d_port_)
      + sizeof(pack::_impl_.d_port_)
      - PROTOBUF_FIELD_OFFSET(pack, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pack_2eproto_getter, &descriptor_table_pack_2eproto_once,
      file_level_metadata_pack_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pack*
Arena::CreateMaybeMessage< ::pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
